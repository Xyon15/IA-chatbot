#!/usr/bin/env python3
"""
D√©monstration du syst√®me de logs avanc√© de Kira-Bot
"""

import sys
import os
import time
import threading
from datetime import datetime

# Ajoute le r√©pertoire du projet au path
project_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_dir)

def demo_basic_logging():
    """D√©monstration du logging de base"""
    print("üé¨ D√©monstration du logging de base")
    print("-" * 50)
    
    from config import logger
    
    # Diff√©rents niveaux de logs
    logger.debug("üîç Message de debug - d√©tails techniques")
    logger.info("‚ÑπÔ∏è Bot d√©marr√© avec succ√®s")
    logger.warning("‚ö†Ô∏è M√©moire faible d√©tect√©e")
    logger.error("‚ùå Erreur de connexion √† la base de donn√©es")
    logger.critical("üö® Erreur critique - arr√™t du syst√®me")
    
    print("‚úÖ Logs de base g√©n√©r√©s")
    time.sleep(2)

def demo_advanced_features():
    """D√©monstration des fonctionnalit√©s avanc√©es"""
    print("\nüé¨ D√©monstration des fonctionnalit√©s avanc√©es")
    print("-" * 50)
    
    try:
        from config import advanced_log_manager
        
        if not advanced_log_manager:
            print("‚ö†Ô∏è Syst√®me de logs avanc√© non disponible")
            return
        
        # G√©n√®re quelques logs avec contexte
        from config import logger
        
        logger.info("ü§ñ Initialisation du bot Discord")
        logger.info("üß† Chargement du mod√®le LLM")
        logger.warning("‚ö†Ô∏è GPU temp√©rature √©lev√©e: 75¬∞C")
        logger.error("‚ùå √âchec de connexion au serveur Discord")
        logger.info("üîÑ Tentative de reconnexion...")
        logger.info("‚úÖ Reconnexion r√©ussie")
        
        # R√©cup√®re les statistiques
        stats = advanced_log_manager.get_stats(1)  # Derni√®re journ√©e
        print(f"üìä Statistiques g√©n√©r√©es:")
        print(f"   - Total logs: {stats.get('total_logs', 0)}")
        print(f"   - Erreurs: {stats.get('error_count', 0)}")
        print(f"   - Warnings: {stats.get('warning_count', 0)}")
        
        # R√©cup√®re les logs r√©cents
        recent_logs = advanced_log_manager.get_logs(limit=5)
        print(f"üìã {len(recent_logs)} logs r√©cents r√©cup√©r√©s")
        
        print("‚úÖ Fonctionnalit√©s avanc√©es d√©montr√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")

def demo_concurrent_logging():
    """D√©monstration du logging concurrent"""
    print("\nüé¨ D√©monstration du logging concurrent")
    print("-" * 50)
    
    from config import logger
    
    def worker_task(worker_id, task_count):
        """T√¢che simul√©e avec logs"""
        for i in range(task_count):
            if i % 3 == 0:
                logger.info(f"üîß Worker {worker_id} - T√¢che {i} d√©marr√©e")
            elif i % 3 == 1:
                logger.warning(f"‚ö†Ô∏è Worker {worker_id} - T√¢che {i} lente")
            else:
                logger.error(f"‚ùå Worker {worker_id} - T√¢che {i} √©chou√©e")
            
            time.sleep(0.1)  # Simule du travail
    
    # Lance plusieurs workers
    threads = []
    for worker_id in range(3):
        thread = threading.Thread(
            target=worker_task, 
            args=(worker_id, 5)
        )
        threads.append(thread)
        thread.start()
    
    # Attend la fin
    for thread in threads:
        thread.join()
    
    print("‚úÖ Logging concurrent d√©montr√©")

def demo_performance():
    """D√©monstration des performances"""
    print("\nüé¨ Test de performance")
    print("-" * 50)
    
    from config import logger
    
    # Test de performance
    start_time = time.time()
    log_count = 200
    
    print(f"üöÄ G√©n√©ration de {log_count} logs...")
    
    for i in range(log_count):
        level = ["info", "warning", "error"][i % 3]
        message = f"Message de test de performance #{i}"
        
        if level == "info":
            logger.info(message)
        elif level == "warning":
            logger.warning(message)
        else:
            logger.error(message)
    
    end_time = time.time()
    duration = end_time - start_time
    rate = log_count / duration
    
    print(f"üìä Performance:")
    print(f"   - {log_count} logs en {duration:.3f} secondes")
    print(f"   - D√©bit: {rate:.1f} logs/seconde")
    
    if rate > 100:
        print("‚úÖ Performance excellente")
    elif rate > 50:
        print("‚úÖ Performance bonne")
    else:
        print("‚ö†Ô∏è Performance acceptable")

def demo_export():
    """D√©monstration de l'export"""
    print("\nüé¨ D√©monstration de l'export")
    print("-" * 50)
    
    try:
        from config import advanced_log_manager
        
        if not advanced_log_manager:
            print("‚ö†Ô∏è Export non disponible sans syst√®me avanc√©")
            return
        
        # Cr√©e un fichier d'export temporaire
        export_path = os.path.join(
            os.path.dirname(__file__), 
            f"demo_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        
        print(f"üíæ Export vers: {export_path}")
        
        success = advanced_log_manager.export_logs(
            export_path, 
            "json", 
            limit=50
        )
        
        if success and os.path.exists(export_path):
            file_size = os.path.getsize(export_path)
            print(f"‚úÖ Export r√©ussi ({file_size} bytes)")
            
            # Nettoie le fichier de test
            os.remove(export_path)
            print("üóëÔ∏è Fichier de test nettoy√©")
        else:
            print("‚ùå √âchec de l'export")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")

def demo_gui_integration():
    """D√©monstration de l'int√©gration GUI"""
    print("\nüé¨ D√©monstration de l'int√©gration GUI")
    print("-" * 50)
    
    try:
        # Test d'import des composants GUI
        from gui.tools.log_viewer_gui import (
            LogTableWidget, LogStatsWidget, 
            LogFilterWidget, LogViewerMainWindow
        )
        
        print("‚úÖ Composants GUI import√©s avec succ√®s")
        
        # Test de l'interface principale
        from gui.enhanced_main_gui import MainInterface
        print("‚úÖ Interface principale disponible")
        
        print("üé® Interfaces disponibles:")
        print("   - Interface compl√®te: start_enhanced_gui.py")
        print("   - Visualiseur logs: launch_log_viewer.py")
        print("   - Scripts batch: launch_gui.bat, launch_log_viewer.bat")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è Composants GUI non disponibles: {e}")
        print("   Installez PySide6: pip install PySide6")
    except Exception as e:
        print(f"‚ùå Erreur GUI: {e}")

def interactive_demo():
    """D√©monstration interactive"""
    print("\nüéÆ Mode interactif")
    print("-" * 50)
    print("Tapez des commandes pour g√©n√©rer des logs:")
    print("  'info <message>' - Log d'information")
    print("  'warn <message>' - Log d'avertissement") 
    print("  'error <message>' - Log d'erreur")
    print("  'stats' - Affiche les statistiques")
    print("  'export' - Exporte les logs")
    print("  'quit' - Quitte le mode interactif")
    print()
    
    from config import logger, advanced_log_manager
    
    while True:
        try:
            command = input("üìù Commande: ").strip()
            
            if command.lower() == 'quit':
                break
            elif command.lower() == 'stats':
                if advanced_log_manager:
                    stats = advanced_log_manager.get_stats(1)
                    print(f"üìä Stats: {stats.get('total_logs', 0)} logs, "
                          f"{stats.get('error_count', 0)} erreurs")
                else:
                    print("‚ö†Ô∏è Statistiques non disponibles")
            elif command.lower() == 'export':
                if advanced_log_manager:
                    export_path = f"interactive_export_{int(time.time())}.json"
                    success = advanced_log_manager.export_logs(export_path, "json", limit=20)
                    if success:
                        print(f"‚úÖ Export r√©ussi: {export_path}")
                    else:
                        print("‚ùå √âchec de l'export")
                else:
                    print("‚ö†Ô∏è Export non disponible")
            elif command.startswith('info '):
                message = command[5:]
                logger.info(f"üìù {message}")
                print("‚úÖ Log d'info g√©n√©r√©")
            elif command.startswith('warn '):
                message = command[5:]
                logger.warning(f"‚ö†Ô∏è {message}")
                print("‚úÖ Log d'avertissement g√©n√©r√©")
            elif command.startswith('error '):
                message = command[6:]
                logger.error(f"‚ùå {message}")
                print("‚úÖ Log d'erreur g√©n√©r√©")
            else:
                print("‚ùì Commande inconnue")
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    print("üëã Mode interactif termin√©")

def main():
    """Fonction principale de d√©monstration"""
    print("üé¨ D√âMONSTRATION DU SYST√àME DE LOGS AVANC√â")
    print("=" * 60)
    print("Cette d√©monstration pr√©sente toutes les fonctionnalit√©s")
    print("du nouveau syst√®me de logs de Kira-Bot")
    print("=" * 60)
    
    try:
        # Initialise le syst√®me
        from config import config, logger, advanced_log_manager
        
        print(f"‚öôÔ∏è Configuration charg√©e")
        print(f"üìã Logger initialis√©: {logger.name}")
        
        if advanced_log_manager:
            print(f"‚úÖ Syst√®me de logs avanc√©: ACTIV√â")
        else:
            print(f"‚ö†Ô∏è Syst√®me de logs avanc√©: NON DISPONIBLE")
        
        print()
        
        # Ex√©cute les d√©monstrations
        demo_basic_logging()
        demo_advanced_features()
        demo_concurrent_logging()
        demo_performance()
        demo_export()
        demo_gui_integration()
        
        # Mode interactif optionnel
        print("\n" + "=" * 60)
        response = input("üéÆ Voulez-vous essayer le mode interactif ? (o/N): ")
        if response.lower() in ['o', 'oui', 'y', 'yes']:
            interactive_demo()
        
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        print("\nüìö Pour plus d'informations:")
        print("   - Guide: GUIDE_LOGS.md")
        print("   - Documentation: LOGS_SYSTEM.md")
        print("   - Tests: python 'zen tests/test_advanced_logging.py'")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
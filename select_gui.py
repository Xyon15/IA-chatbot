#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
S√©lecteur d'interface graphique pour Neuro-Bot
Permet de choisir entre les diff√©rentes interfaces disponibles
"""

import sys
import os
import subprocess
from pathlib import Path

def print_banner():
    """Affiche la banni√®re de s√©lection"""
    print("=" * 60)
    print("ü§ñ NEURO-BOT - S√âLECTEUR D'INTERFACE")
    print("=" * 60)
    print()

def print_interfaces():
    """Affiche les interfaces disponibles"""
    interfaces = [
        {
            "num": "1",
            "name": "Interface Principale Am√©lior√©e",
            "file": "launch_enhanced_gui.py",
            "description": "üöÄ Moderne avec indicateurs circulaires, logs optimis√©s",
            "features": ["Indicateurs circulaires temps r√©el", "Design moderne sombre", "Raccourcis clavier", "Logs avec limite intelligente"]
        },
        {
            "num": "2", 
            "name": "Interface Compl√®te (Neuro GUI)",
            "file": "gui/neuro_gui.py",
            "description": "üîß Interface compl√®te avec toutes les fonctionnalit√©s",
            "features": ["Gestion m√©moire avanc√©e", "Graphiques d√©taill√©s", "Configuration √©tendue", "Historique complet"]
        },
        {
            "num": "3",
            "name": "Interface Simple (Bot GUI)", 
            "file": "gui/bot_gui.py",
            "description": "üí° Interface basique et l√©g√®re",
            "features": ["Contr√¥les de base", "Logs simples", "Faible utilisation ressources", "D√©marrage rapide"]
        }
    ]
    
    for interface in interfaces:
        print(f"[{interface['num']}] {interface['name']}")
        print(f"    {interface['description']}")
        for feature in interface['features']:
            print(f"    ‚Ä¢ {feature}")
        print(f"    üìÅ Fichier: {interface['file']}")
        print()
    
    return interfaces

def launch_interface(file_path):
    """Lance l'interface s√©lectionn√©e"""
    try:
        # V√©rification de l'existence du fichier
        if not os.path.exists(file_path):
            print(f"‚ùå Erreur: Le fichier '{file_path}' n'existe pas")
            return False
        
        print(f"üöÄ Lancement de {file_path}...")
        
        # Lancement dans un nouveau processus
        if file_path.startswith("gui/"):
            # Pour les fichiers dans le dossier gui
            subprocess.Popen([sys.executable, file_path], 
                           cwd=os.path.dirname(os.path.abspath(__file__)))
        else:
            # Pour les fichiers √† la racine
            subprocess.Popen([sys.executable, file_path])
        
        print("‚úÖ Interface lanc√©e avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        return False

def check_dependencies():
    """V√©rifie les d√©pendances n√©cessaires"""
    print("üîç V√©rification des d√©pendances...")
    
    dependencies = {
        "PySide6": "Interface graphique",
        "psutil": "Monitoring syst√®me", 
        "pynvml": "Monitoring GPU NVIDIA"
    }
    
    missing = []
    for dep, desc in dependencies.items():
        try:
            __import__(dep.lower() if dep == "PySide6" else dep)
            print(f"  ‚úÖ {dep} - {desc}")
        except ImportError:
            print(f"  ‚ùå {dep} - {desc} (MANQUANT)")
            missing.append(dep)
    
    if missing:
        print(f"\n‚ö†Ô∏è  D√©pendances manquantes: {', '.join(missing)}")
        print("üì¶ Installation requise:")
        for dep in missing:
            if dep == "PySide6":
                print(f"   pip install PySide6")
            else:
                print(f"   pip install {dep}")
        print()
        return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles!")
    print()
    return True

def main():
    """Fonction principale"""
    print_banner()
    
    # V√©rification des d√©pendances
    if not check_dependencies():
        choice = input("Continuer malgr√© les d√©pendances manquantes ? (o/N): ").lower()
        if choice not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Installation annul√©e")
            return 1
        print()
    
    # Affichage des interfaces
    interfaces = print_interfaces()
    
    print("üìù RECOMMANDATIONS:")
    print("  ‚Ä¢ Premi√®re utilisation: Interface Simple (3)")
    print("  ‚Ä¢ Utilisation quotidienne: Interface Am√©lior√©e (1)")  
    print("  ‚Ä¢ Configuration avanc√©e: Interface Compl√®te (2)")
    print()
    
    # Boucle de s√©lection
    while True:
        try:
            choice = input("Choisissez une interface (1-3) ou 'q' pour quitter: ").strip()
            
            if choice.lower() in ['q', 'quit', 'quitter']:
                print("üëã Au revoir!")
                return 0
            
            if choice in ['1', '2', '3']:
                selected_interface = interfaces[int(choice) - 1]
                print(f"\nüéØ Interface s√©lectionn√©e: {selected_interface['name']}")
                
                # Confirmation
                confirm = input("Confirmer le lancement ? (O/n): ").lower()
                if confirm in ['', 'o', 'oui', 'y', 'yes']:
                    if launch_interface(selected_interface['file']):
                        return 0
                    else:
                        print("\n‚ùå √âchec du lancement")
                        continue
                else:
                    print("‚ùå Lancement annul√©")
                    continue
            else:
                print("‚ùå Choix invalide. Veuillez entrer 1, 2, 3 ou 'q'")
                
        except KeyboardInterrupt:
            print("\n\nüëã Interruption utilisateur. Au revoir!")
            return 0
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    sys.exit(main())
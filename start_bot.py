#!/usr/bin/env python3
"""
Script de d√©marrage am√©lior√© pour le bot Neuro
Inclut la validation de la configuration et l'initialisation compl√®te
"""

import sys
import os
import asyncio
from pathlib import Path

def check_requirements():
    """V√©rifie que tous les pr√©requis sont install√©s"""
    print("üîç V√©rification des pr√©requis...")
    
    # Mapping des noms de packages vers leurs noms d'import
    required_packages = {
        'discord.py': 'discord',
        'llama-cpp-python': 'llama_cpp', 
        'python-dotenv': 'dotenv',
        'pyside6': 'PySide6',
        'pynvml': 'pynvml',
        'aiohttp': 'aiohttp',
        'selectolax': 'selectolax',
        'transformers': 'transformers',
        'pyotp': 'pyotp'
    }
    
    missing = []
    for package_name, import_name in required_packages.items():
        try:
            __import__(import_name)
        except ImportError:
            missing.append(package_name)
    
    if missing:
        print(f"‚ùå Packages manquants: {', '.join(missing)}")
        print("Installez-les avec: pip install " + " ".join(missing))
        return False
    
    print("‚úÖ Tous les packages requis sont install√©s")
    return True

def check_files():
    """V√©rifie que tous les fichiers n√©cessaires existent"""
    print("üìÅ V√©rification des fichiers...")
    
    required_files = [
        '.env',
        'JSON/config.json',
        'JSON/context.json', 
        'JSON/character_limits.json',
        'JSON/web.json',
        'JSON/autoreply.json'
    ]
    
    missing = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing.append(file_path)
    
    if missing:
        print(f"‚ùå Fichiers manquants: {', '.join(missing)}")
        return False
    
    print("‚úÖ Tous les fichiers requis sont pr√©sents")
    return True

def check_model():
    """V√©rifie que le mod√®le LLM existe"""
    print("ü§ñ V√©rification du mod√®le...")
    
    try:
        from config import config
        model_path = Path(config.MODEL_PATH)
        
        if not model_path.exists():
            print(f"‚ùå Mod√®le non trouv√©: {model_path}")
            print("T√©l√©chargez un mod√®le GGUF dans le dossier models/")
            return False
        
        print(f"‚úÖ Mod√®le trouv√©: {model_path.name}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du mod√®le: {e}")
        return False

def check_database():
    """Initialise et v√©rifie la base de donn√©es"""
    print("üóÑÔ∏è Initialisation de la base de donn√©es...")
    
    try:
        from database import init_database
        init_database()
        print("‚úÖ Base de donn√©es initialis√©e")
        return True
    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
        return False

def check_config():
    """V√©rifie la configuration"""
    print("‚öôÔ∏è V√©rification de la configuration...")
    
    try:
        from config import config, logger
        
        # V√©rifier les variables critiques
        if not config.TOKEN:
            print("‚ùå DISCORD_TOKEN manquant dans .env")
            return False
        
        if not config.AUTH_SECRET:
            print("‚ö†Ô∏è AUTH_SECRET manquant dans .env (2FA d√©sactiv√©)")
        
        print("‚úÖ Configuration valide")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        return False

async def start_bot_safe():
    """D√©marre le bot avec gestion d'erreurs"""
    try:
        from bot import start_bot
        from config import logger
        
        logger.info("D√©marrage du bot Neuro...")
        print("üöÄ D√©marrage du bot Discord...")
        
        await start_bot()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("üëã Bot arr√™t√©")

def main():
    """Fonction principale"""
    print("ü§ñ Neuro-Bot - D√©marrage S√©curis√©")
    print("=" * 40)
    
    # V√©rifications pr√©alables
    checks = [
        check_requirements,
        check_files,
        check_config,
        check_model,
        check_database
    ]
    
    for check in checks:
        if not check():
            print("\n‚ùå √âchec des v√©rifications pr√©alables")
            print("Corrigez les erreurs ci-dessus avant de red√©marrer")
            return 1
    
    print("\n‚úÖ Toutes les v√©rifications sont pass√©es")
    print("üöÄ Lancement du bot...\n")
    
    # D√©marrage du bot
    try:
        asyncio.run(start_bot_safe())
        return 0
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())